<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="StudentMapper">
	
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="student" type="study.spring.hellospring.model.Student">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="studno"	column="studno"/>
		<result property="name"		column="name"/>
		<result property="userid"	column="userid"/>
		<result property="grade"	column="grade"/>
		<result property="idnum"	column="idnum"/>
		<result property="birthdate" column="birthdate"/>
		<result property="tel"		column="tel"/>
		<result property="height"	column="height"/>
		<result property="weight"	column="weight"/>
		<result property="deptno"	column="deptno"/>
		<result property="profno"	column="profno"/>
	</resultMap>
	
	<!-- 
		다중행 조회(목록조회)를 위한 기능 정의
		<select id="메서드이름" parameterType="파라미터로 전달될 객체의 클래스 타입" resultMap="리턴될 Beans의 id">
	-->
	<select id="selectStudentList" parameterType="study.spring.hellospring.model.Student"
		resultMap="student">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT	studno, name, userid, grade, idnum,
				TO_CHAR(birthdate, 'YYYY-MM-DD') AS birthdate,
				tel, height, weight, deptno, profno 
		FROM	student
		ORDER BY studno ASC
	</select>
	
	<!-- 
		단일행 조회(상세보기)를 취한 기능 정의
		<select id="메서드이름" parameterType="파라미터의 데이터 타입" resultMap="리턴될 Beans의 id">
	-->
	<select id="selectStudentItem" parameterType="study.spring.hellospring.model.Student" resultMap="student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT	studno, name, userid, grade, idnum,
				TO_CHAR(birthdate, 'YYYY-MM-DD') AS birthdate,
				tel, height, weight, deptno, profno 
		FROM	student
		WHERE studno=#{studno}
	</select>
	
	<!-- 
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입">
	 -->
	<insert id="insertStudentItem" parameterType="study.spring.hellospring.model.Student">
		<!-- 데이터 조회 전, 시퀀스를 미리 조회하여 파라미터로 전달되는 Beans의 studno에 미리 저장한다. -->
		<selectKey keyProperty="studno" resultType="int" order="BEFORE">
			SELECT seq_student.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO student(studno, name, userid, grade, idnum, birthdate, tel, height, weight, deptno, profno)
		VALUES(#{studno}, #{name}, #{userid}, #{grade}, #{idnum}, #{birthdate}, #{tel}, #{height}, #{weight}, #{deptno}, #{profno})
	</insert>
	
	<!-- 
		데이터 수정을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입">
	 -->
	<update id="updateStudentItem" parameterType="study.spring.hellospring.model.Student">
		<!-- "#{변수명}"으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		UPDATE student
		SET studno=#{studno}, name=#{name}, userid=#{userid}, grade=#{grade}, idnum=#{idnum}, birthdate=#{birthdate}, tel=#{tel},
			height=#{height}, weight=#{weight}, deptno=#{deptno}, profno=#{profno}
		WHERE studno=#{studno}
	</update>
	
	<!-- 
		데이터 삭제를 위한 기능 정의
		<delete id="메서드이름" parameterType="파라미터의 데이터 타입">
	 -->
	<delete id="deleteStudentItem" parameterType="study.spring.hellospring.model.Student">
		<!-- "#{변수명}"으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		DELETE FROM student WHERE studno=#{studno}
	</delete>
</mapper>

